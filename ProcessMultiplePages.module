<?php

/**
 * ProcessWire Multiple Pages Module
 *
 * Allows you to create multiple pages at once.
 *
 * @author Benjamin Graedel <info@analogue.ch>
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessMultiplePages extends Process {

	const pageName = 'multiplepages';
	const treeSpacer = '-';

	public function init() {
		parent::init(); // required
	}


	/**
	 * Execute plugin
	 *
	 * @param   array   $formData
	 * @return  string
	 */
	public function ___execute($formData = array()) {

		$this->breadcrumbs->add(new Breadcrumb('../multiplepages', 'Add multiple pages'));

		// get form
		$out = $this->createInitForm()->render();
		return $out;
	}

	public function ___executeNamepages() {

		$parentId = (int)$_POST['parent'];
		$number = (int)$_POST['number'];

		/** @var Page $parentPage */
		$parentPage = wire('pages')->get($parentId);
		if (!is_object($parentPage)) {
			$this->error('No page found');
			return $this->execute();
		}

		$noChildren = $parentPage->template->noChildren;
		if ($noChildren) {
			$this->error("Sorry, this template doesn't allow children");
			return $this->execute();
		}

		$out = $this->createAddForm($number, $parentPage)->render();
		return $out;
	}

	/**
	 * Generate new pages
	 */
	public function ___executeAddpages() {

		$parents = $_POST['page'];

		$count = 0;
		foreach($parents as $id=>$pages) {
			$parentPage = wire('pages')->get($id);
			foreach ($pages as $data) {

				// handle title
				$title = $data['title'];
				if (trim($title)=='') continue;

				// handle template
				$template = mysql_real_escape_string($data['template']);
				$template = ( trim($template)=='' ? $parentPage->template->name : $template);

				$page = new Page();
				$page->template = $template;
				$page->name = $output = preg_replace('/[^a-zA-Z0-9]/s', '', $title);
				$page->parent = $parentPage;
				$page->title = $title;

				// save the page
				$page->save();
				$count++;
			}
		}

		$this->message($count.' page(s) have been generated');
		return $this->execute();
	}


	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned.
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get(22);
		$page->process = $this;

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}");
	}


	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed.
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}");
			$page->delete();
		}
	}


	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Add multiple pages',
			'version' => 101,
			'summary' => 'Allows you to create multiple pages at once',
			'href' => 'http://www.processwire.com',
			'singular' => true,
			'autoload' => false,
		);
	}


	/**
	 * Create Form to insert Page-Tree
	 *
	 * @param   array   $formData
	 * @return  InputfieldForm
	 */
	protected function createInitForm($formData=array()) {

		// init form
		$form = $this->modules->get("InputfieldForm");
		$form->attr('id', 'select_pages_form');
		$form->attr('method', 'post');
		$form->attr('action', './namepages');

		// init parent
		$parentField = $this->modules->get("InputfieldPageListSelect");
		$parentField->attr('id+name', 'parent');
		$parentField->label = $this->_("Parent page");
		$form->add($parentField);

		// init number
		$numberField = $this->modules->get("InputfieldText");
		$numberField->attr('id+name', 'number');
		$numberField->attr('size+maxlength', '3');
		$numberField->label = $this->_("Number of subpages");
		$form->add($numberField);


//        // init position field
//        $positionField = $this->modules->get("InputfieldCheckbox");
//        $positionField->attr('id+name', 'position');
//        $positionField->attr('value', ( isset($formData['position']) ? $formData['position'] : '' ));
//        $positionField->attr('checked', true);
//        $positionField->label = $this->_("Insert new pages after existing sub-pages");
//        $form->add($positionField);
//
		// init submit button
		$submitField = $this->modules->get("InputfieldSubmit");
		$submitField->value = $this->_("Go to next step");
		$form->add($submitField);

		return $form;
	}


	/**
	 * Create add form
	 *
	 * @param   int $number
	 * @param   Page $parentPage
	 * @return  InputFieldForm
	 */
	protected function createAddForm($number, $parentPage) {

		$number = (int)$number;
		$parentId = $parentPage->id;

		// init form
		$form = $this->modules->get("InputfieldForm");
		$form->attr('id', 'add_pages_form');
		$form->attr('method', 'post');
		$form->attr('action', './addpages');

		// prepare options
		$childTemplates = $parentPage->template->childTemplates;
		$templateOptions = $this->prepareTemplateOptions($childTemplates);

		for ($i=1; $i<=$number; $i++) {

			$fieldset = $this->modules->get("InputfieldFieldset");
			$fieldset->attr('id', 'fieldset_add'.$i);
			//$fieldset->label = $this->_("Page ".$i);
			$form->add($fieldset);

			$titleField = $this->modules->get("InputfieldText");
			$titleField->attr('id', 'title_add'.$i);
			$titleField->attr('name', 'page['.$parentId.']['.$i.'][title]');
			$titleField->attr('size', '15');
			$titleField->label = $this->_("Page title");
			$fieldset->add($titleField);

			$templateField = $this->modules->get("InputfieldSelect");
			$templateField->attr('id', 'template_add'.$i);
			$templateField->attr('name', 'page['.$parentId.']['.$i.'][template]');
			$templateField->attr('size', '1');
			$templateField->label = $this->_("Page title");
			$templateField->addOptions($templateOptions);
			$fieldset->add($templateField);
		}


		// init submit button
		$submitField = $this->modules->get("InputfieldSubmit");
		$submitField->value = $this->_("Generate pages");
		$form->add($submitField);

		return $form;
	}

	/**
	 * Create options for template dropdown
	 *
	 * @param $templateIds
	 * @return array
	 */
	protected function prepareTemplateOptions($templateIds) {

		if (!count($templateIds)) {
			$templateIds = implode(',', $templateIds);
			$templates = wire('templates')->get($templateIds);
		} else {
			$templates = wire('templates');
		}

		$data = array();
		foreach($templates as $template) {
			$data[$template->name] = $template->name;
		}

		return $data;
	}

}


?>